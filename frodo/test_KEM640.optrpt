Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.1.2 Build 20201208_000000

Compiler options: -I/include -I/usr/include -pg -g -ldl -Ofast -qopenmp -qopt-report=5 -Wall -std=gnu11 -Wextra -DNIX -D _AMD64_ -D _REFERENCE_ -D _AES128_FOR_A_ -D _USE_OPENSSL_ -L./frodo -lfrodo -lm -L/usr/lib -lssl -lcrypto -qopenmp -o frodo/test_KEM

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1/4=25.0%] tests/test_kem.c(54,12)
  -> INLINE: (57,7) kem_test(const char *, int) (isz = 82) (sz = 92)
    -> EXTERN: (17,2) printf(const char *__restrict__, ...)
    -> EXTERN: (18,2) printf(const char *__restrict__, ...)
    -> EXTERN: (19,2) printf(const char *__restrict__, ...)
    -> EXTERN: (20,2) printf(const char *__restrict__, ...)
    -> EXTERN: (23,3) crypto_kem_keypair(unsigned char *, unsigned char *)
    -> EXTERN: (24,3) crypto_kem_enc(unsigned char *, unsigned char *, const unsigned char *)
    -> EXTERN: (25,3) crypto_kem_dec(unsigned char *, const unsigned char *, const unsigned char *)
    -> EXTERN: (26,7) memcmp(const void *, const void *, size_t)
    -> EXTERN: (27,4) printf(const char *__restrict__, ...)
    -> EXTERN: (31,2) printf(const char *__restrict__, ...)
    -> EXTERN: (32,2) printf(const char *__restrict__, ...)
  -> EXTERN: (62,2) printf(const char *__restrict__, ...)
  -> (63,2) kem_bench(const int) (isz = 425) (sz = 430)
     [[ Inlining would exceed -inline-max-size value (430>253) <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at tests/test_kem.c(22,2) inlined into tests/test_kem.c(58,7)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

tests/test_kem.c(26,7):remark #34026: call to memcmp implemented as a call to optimized library version
tests/test_kem.c(54,12):remark #34051: REGISTER ALLOCATION : [main] tests/test_kem.c:54

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8-r9 r12]
        
    Routine temporaries
        Total         :      69
            Global    :      14
            Local     :      55
        Regenerable   :      58
        Spilled       :       1
        
    Routine stack
        Variables     :   39260 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       2 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: kem_bench(const int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (kem_bench(const int)) [2/4=50.0%] tests/test_kem.c(38,42)
  -> EXTERN: (44,2) printf(const char *__restrict__, ...)
  -> EXTERN: (44,2) gettimeofday(struct timeval *__restrict__, void *__restrict__)
  -> INLINE: (44,2) rdtsc(void) (isz = 1) (sz = 6)
  -> EXTERN: (44,2) crypto_kem_keypair(unsigned char *, unsigned char *)
  -> INLINE: (44,2) rdtsc(void) (isz = 1) (sz = 6)
  -> EXTERN: (44,2) gettimeofday(struct timeval *__restrict__, void *__restrict__)
  -> EXTERN: (46,2) crypto_kem_keypair(unsigned char *, unsigned char *)
  -> EXTERN: (47,2) printf(const char *__restrict__, ...)
  -> EXTERN: (47,2) gettimeofday(struct timeval *__restrict__, void *__restrict__)
  -> INLINE: (47,2) rdtsc(void) (isz = 1) (sz = 6)
  -> EXTERN: (47,2) crypto_kem_enc(unsigned char *, unsigned char *, const unsigned char *)
  -> INLINE: (47,2) rdtsc(void) (isz = 1) (sz = 6)
  -> EXTERN: (47,2) gettimeofday(struct timeval *__restrict__, void *__restrict__)
  -> EXTERN: (49,2) crypto_kem_enc(unsigned char *, unsigned char *, const unsigned char *)
  -> EXTERN: (50,2) printf(const char *__restrict__, ...)
  -> EXTERN: (50,2) gettimeofday(struct timeval *__restrict__, void *__restrict__)
  -> INLINE: (50,2) rdtsc(void) (isz = 1) (sz = 6)
  -> EXTERN: (50,2) crypto_kem_dec(unsigned char *, const unsigned char *, const unsigned char *)
  -> INLINE: (50,2) rdtsc(void) (isz = 1) (sz = 6)
  -> EXTERN: (50,2) gettimeofday(struct timeval *__restrict__, void *__restrict__)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at tests/test_kem.c(44,2)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ tests/ds_benchmark.h(82,0) ]
LOOP END

LOOP BEGIN at tests/test_kem.c(47,2)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ tests/ds_benchmark.h(82,0) ]
LOOP END

LOOP BEGIN at tests/test_kem.c(50,2)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ tests/ds_benchmark.h(82,0) ]
LOOP END

    Report from: Code generation optimizations [cg]

tests/test_kem.c(38,42):remark #34051: REGISTER ALLOCATION : [kem_bench] tests/test_kem.c:38

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rsi rdi r8-r10 r12-r13 zmm0-zmm11]
        
    Routine temporaries
        Total         :     180
            Global    :      41
            Local     :     139
        Regenerable   :      62
        Spilled       :      13
        
    Routine stack
        Variables     :   39400 bytes*
            Reads     :      27 [1.15e+01 ~ 11.5%]
            Writes    :       9 [3.39e+00 ~ 3.4%]
        Spills        :      72 bytes*
            Reads     :       9 [4.06e+00 ~ 4.1%]
            Writes    :      18 [4.79e+00 ~ 4.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: rdtsc(void)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (rdtsc(void)) tests/ds_benchmark.h(77,29)

===========================================================================

Begin optimization report for: kem_test(const char *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (kem_test(const char *, int)) tests/test_kem.c(11,67)

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

